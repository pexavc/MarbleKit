precision highp float;
uniform vec2 u_resolution;
uniform float u_time;
uniform vec2 u_position;
//gl_FragColor, gl_FragCoord
                
#define S(a,b,t) smoothstep(a,b,t)

// An ellipse signed distance function by iq
// https://www.iquilezles.org/www/articles/ellipsedist/ellipsedist.htm
float sdEllipse( in vec2 z, in vec2 ab )
{
    vec2 p = vec2(abs(z));
    
    if( p.x > p.y ){ p=p.yx; ab=ab.yx; }
	
    float l = ab.y*ab.y - ab.x*ab.x;
    float m = ab.x*p.x/l; float m2 = m*m;
    float n = ab.y*p.y/l; float n2 = n*n;
    float c = (m2 + n2 - 1.0)/3.0; float c3 = c*c*c;
    float q = c3 + m2*n2*2.0;
    float d = c3 + m2*n2;
    float g = m + m*n2;

    float co;

    if( d<0.0 )
    {
        float p = acos(q/c3)/3.0;
        float s = cos(p);
        float t = sin(p)*sqrt(3.0);
        float rx = sqrt( -c*(s + t + 2.0) + m2 );
        float ry = sqrt( -c*(s - t + 2.0) + m2 );
        co = ( ry + sign(l)*rx + abs(g)/(rx*ry) - m)/2.0;
    }
    else
    {
        float h = 2.0*m*n*sqrt( d );
        float s = sign(q+h)*pow( abs(q+h), 1.0/3.0 );
        float u = sign(q-h)*pow( abs(q-h), 1.0/3.0 );
        float rx = -s - u - c*4.0 + 2.0*m2;
        float ry = (s - u)*sqrt(3.0);
        float rm = sqrt( rx*rx + ry*ry );
        float p = ry/sqrt(rm-rx);
        co = (p + 2.0*g/rm - m)/2.0;
    }

    float si = sqrt( 1.0 - co*co );
 
    vec2 closestPoint = vec2( ab.x*co, ab.y*si );
	
    return length(closestPoint - p ) * sign(p.y-closestPoint.y);
}


// rotates pos to align the up vector towards up
vec2 rotUp(vec2 pos, vec2 up)
{
    vec2 left = vec2(-up.y, up.x);
    return left * pos.x + up * pos.y;
}

const float pi = 3.1415926;
const float pi2 = 6.2831853;
const float quadrant = pi / 6.0;

const float blackLevel = 0.3; // True black is too aggressive



// The mouth is the intersection of two ellipses, I traced them in photoshop to
// compute the right radii and offsets
float mouthDst(vec2 uv)
{
    return max(sdEllipse(uv - vec2(0.0, -0.17), vec2(0.30, 0.2055)),
               sdEllipse(uv - vec2(0.0,  0.07), vec2(0.14, 0.2055)));
}

// For the eye, I use simpler circle distance maths in a scales and rotated space
// as I don't need an accurate distance function to create an outline
vec4 eye(vec2 uv, vec2 up, vec2 spot1, vec2 spot2, float scale)
{
    uv = rotUp(uv, up);
    uv.x *= 1.5;
    
    float len = length(uv);
    float len2 = length(uv + spot1);// vec2(0.010, 0.025));
    float len3 = length(uv + spot2);// vec2(-0.005, -0.017));
    
    float aa = scale * 4.0 / u_resolution.x;
    
    vec4 eye;
    
    eye.a = S(0.04 + aa, 0.04, len);
    
    eye.rgb = vec3(S(0.014, 0.014 - aa, len2) + S(0.02, 0.02 - aa, len3) + blackLevel);
    
    return eye;
}

const float cRatio = 1.0 / 255.0;

// I wanted the color palette to be true to the 16 hue rainbow used
// by Murakami but I didn't manage to reproduce the orange-yellow-green part
// using simple maths so I defaulted to a palette. Then I realized I couldn't target
// Webgl < 3.0 (Wich was one of my objectives) with array constructor so I decided
// to build a function selecting the right color with a dichotomic approch in hope
// that the compiler will make a decent job of optimizing all those branches.
vec3 palette(float id)
{
	if (id < 6.0)
    {
        //[0 - 5]
        if (id < 3.0)
        {   //[0 - 2]
            if (id < 1.0) return vec3(181.0, 23.0, 118.0) * cRatio;
            else if (id < 2.0) return vec3(225.0, 27.0, 104.0) * cRatio;
            else return vec3(230.0, 40.0, 24.0) * cRatio;
        }
        else
        {   //[3 - 5]
            if (id < 4.0) return vec3(240.0, 110.0, 14.0) * cRatio;
            else if (id < 5.0) return vec3(253.0, 195.0, 2.0) * cRatio;
            else return vec3(253.0, 241.0, 121.0) * cRatio;
        }
    }
    else
    {   //[6 - 11]
        if (id < 9.0)
        {   //[6 - 8]
            if (id < 7.0) return vec3(167.0, 202.0, 56.0) * cRatio;
            else if (id < 8.0) return  vec3(0.0, 152.0, 69.0) * cRatio;
            else return vec3(2.0, 170.0, 179.0) * cRatio;
        }
        else
        {   //[9 - 11] The darker color are at the end to be avoided by mod
            if (id < 10.0) return vec3(25.0, 186.0, 240.0) * cRatio;
            else if (id < 11.0) return  vec3(0.0, 98.0, 171.0) * cRatio;
            else return vec3(40.0, 49.0, 118.0) * cRatio;
        }
    }
}



// Adapted from BigWIngs
vec4 N24(vec2 t) {
    float n = mod(t.x * 458.0 + t.y * 127.3, 100.0);
	return fract(sin(n*vec4(123., 1024., 1456., 264.))*vec4(6547., 345., 8799., 1564.));
}

// That's where the meat of the shader is, drawing a flower
vec4 flower(vec2 uv, vec2 id, float minSz, float maxSz, float scale)
{
    vec4 rnd = N24(id);//mod(id.x, 300.0) * mod(id.y, 500.0) * 13.56);
    
    float rdScale = mix(minSz, maxSz, rnd.z);
    
    scale *= rdScale; // The border thickness & AA is scale-independant
    
    uv.xy *= rdScale;
    
    uv.x += 0.1 + rnd.x * 0.5;
    uv.y += 0.25 + rnd.y * 0.2;
    uv.y += sin(u_time * mix(0.4, 1.0, rnd.y) + (rnd.w * 45.0)) * 0.2;

    
    float aa2 = scale * 3.0 / u_resolution.x;
    
    float centerDst = length(uv);
    
    if (centerDst > 0.5) return vec4(0.0);
    
    float edge; // Mask for the outline edge
    
    vec4 color = vec4(1.0, 1.0, 1.0, 1.0); // Underlying color
   
    
    float thick = 0.002 * scale;
    
    if (centerDst < 0.2)
    {
        //Face part
        
        float thres = 0.2 - thick;
        
        // inner part of edge circle surrounding the head
        edge =  S(thres, thres - aa2, centerDst);
        
        float mouth = mouthDst(uv);
        
        // edge of the mouth
        edge *= S(thick, thick + aa2, abs(mouth));
        
        // face color
        float faceRnd = fract(rnd.x * 45.0 + rnd.y * 23.45);
        if (faceRnd < 0.5) 
        {
            // Flowers with classic yellow / red faces
        	color.rgb = (mouth < 0.0) ? vec3(1.0, 0.0, 0.0) : vec3(1.0, 1.0, 0.0); 
        }
        else
        {
            // Flowers with white face / random color mouth
            float colId = mod(faceRnd * 545.456, 11.0);
            color.rgb = (mouth < 0.0) ? palette(colId) : vec3(1.0); 
        }
        
        // Eyes
        vec4 eyeImg;
        if (uv.x > 0.0)
        {
           eyeImg = eye(uv - vec2(0.075, 0.095), vec2(-0.7, 1.2),
                       vec2(0.007, 0.025), vec2(-0.004, -0.019), scale);
        }
        else   
        {
           eyeImg = eye(uv - vec2(-0.075, 0.095), vec2(0.7, 1.2),
                       vec2(0.024, 0.010), vec2(-0.016, -0.009), scale);
        }

        color.rgb = mix(color.rgb, eyeImg.rgb, eyeImg.a);
    }
    else
    {
        float rot = u_time * rnd.y * 0.5;
        float angle = fract((atan(uv.x, uv.y) + rot) / pi2);
    
        float section = angle * 12.0;
        float sectionId = floor(section);
        
        if (rdScale < 0.86 && rnd.w > 0.55)
        {
           // Rainbow flower
           color.rgb = palette(sectionId);//mod(sectionId + (rnd.x + rnd.y) * 345.456, 12.0));
        }
        else if (rnd.y > 0.05)
        {
            //Alternating flower
            if (mod(sectionId, 2.0) == 0.0)
            {
                // Color 1
                float colId = mod((rnd.x + rnd.y) * 345.456, 10.0);
                color.rgb = palette(colId);
            }
            else if (rnd.x > 0.75)
            {
                // Color 2
                float colId = mod((rnd.w + rnd.z) * 545.456, 11.0);
                color.rgb = palette(colId);
            }
            // else, Color2 is white by default
        }
		// else, fully white petals
        
        if (centerDst < 0.36)
        {
            //intermediate part, concentric bars
            
            float sectionX = fract(section);
            float edgeDist = 0.5 - abs(sectionX - 0.5);
            
            edgeDist *= centerDst; // Untaper bar space so bars have constant thickness
            
            float aa = scale * 7.0 / u_resolution.x;
            float bar = thick * 1.7;
            edge = S(bar, bar + aa, edgeDist);

            // outer part of edge circle surrounding the head
            float thres = 0.2 + thick;
            float head = S(thres, thres + aa2, centerDst);
            edge *= head;
        }
        else
        {
            // Petal tips are actually ellipses, they could have been approximated them with
            // circles but I didn't because I have OCD and I needed the ellipse SDF 
            // for the mouth anyways ;)
            
            // Angle to the center of the quadrant
            float quadAngle = (sectionId + 0.5) * quadrant - rot + pi; 

            // Center of the ellipse
            vec2 petalUp = vec2(-sin(quadAngle), -cos(quadAngle));
            vec2 petalCenter = petalUp * 0.36;

            // Rotation of the ellipse basis
            vec2 petalSpace = rotUp(uv - petalCenter, petalUp);

            // Signed distance function of the ellipse
            float petalDst = sdEllipse(petalSpace, vec2(0.0944, 0.09));

            //border edge and alpha mask
            float borderIn = S(thick + aa2, thick, petalDst);
            float borderOut = S(-thick, -thick - aa2, petalDst);

            edge = (borderOut);
            
            color.a = borderIn;
        }
    }
    
    color.rgb = mix(vec3(blackLevel), color.rgb,edge);
    
    return color;
}


vec3 flowerLayer(vec2 uv, vec3 bg, float minSz, float maxSz, float scale)
{
    vec2 cellId = floor(uv);
    vec2 cellUv = fract(uv) - vec2(0.5);
   
    //Check only 4 cells because the flower function is rather costly
    for (float x = 0.0; x <= 1.0; x += 1.0)
    {
        for (float y = 0.0; y <= 1.0; y += 1.0)
    	{
            vec2 offset = vec2(x, y);
            
            vec4 f = flower(cellUv - offset, cellId + offset, minSz, maxSz, scale);
    		bg = mix(bg, f.rgb, f.a);
    	}
    }
    
    return bg;
}



void main()
{
    
    vec2 uv = (gl_FragCoord.xy - .5 * u_resolution.xy) / u_resolution.y; 
    
    float sc = 1.65 + cos(u_time* 0.1) * 0.25;
    
    uv.xy *= sc;
    
    uv.x += 35.9;
    uv.y += 45.0;
    
 
    float scroll = u_time * 0.25;
    

   	float t = u_time * 0.23;
    vec3 col = vec3(0.8) + vec3(0.2) * sin(t + vec3(0.0, pi * 0.5, pi));
    
    col = flowerLayer(uv * 4.0 + vec2(scroll, -scroll * 0.3 + 59.0), col, 0.8, 1.0, 2.0 * sc);
    col = flowerLayer(uv * 3.0 + vec2(scroll, -scroll * 0.2 + 59.0), col, 0.7, 1.25, 1.5 * sc);
    col = flowerLayer(uv * 2.0 + vec2(scroll, -scroll * 0.1 + 345.0), col, 0.8, 2.0, 1.0 * sc);

    // Output to screen
    gl_FragColor = vec4(col,1.0);
}
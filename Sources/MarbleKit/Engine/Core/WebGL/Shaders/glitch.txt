precision highp float;
uniform vec2 u_resolution;
uniform float u_time;
uniform vec2 u_position;
               
void main()
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 p = 5.0*gl_FragCoord.xy/u_resolution.xy;
                
    float i = float(1);
    p += vec2(0.5 / i * sin(i * p.y  *+ u_time + 0.3 * i) + 0.8, 0.4 / i * sin(i*p.x+ u_time + 0.3 * i) + 1.6);
    i = float(2);
    p += vec2(0.5 / i * sin(i * p.y  *+ u_time + 0.3 * i) + 0.8, 0.4 / i * sin(i*p.x+ u_time + 0.3 * i) + 1.6);
    i = float(3);
    p += vec2(0.5 / i * sin(i * p.y  *+ u_time + 0.3 * i) + 0.8, 0.4 / i * sin(i*p.x+ u_time + 0.3 * i) + 1.6);
    i = float(4);
    p += vec2(0.5 / i * sin(i * p.y  *+ u_time + 0.3 * i) + 0.8, 0.4 / i * sin(i*p.x+ u_time + 0.3 * i) + 1.6);
    i = float(5);
    p += vec2(0.5 / i * sin(i * p.y  *+ u_time + 0.3 * i) + 0.8, 0.4 / i * sin(i*p.x+ u_time + 0.3 * i) + 1.6);
    i = float(6);
    p += vec2(0.5 / i * sin(i * p.y  *+ u_time + 0.3 * i) + 0.8, 0.4 / i * sin(i*p.x+ u_time + 0.3 * i) + 1.6);
    i = float(7);
    p += vec2(0.5 / i * sin(i * p.y  *+ u_time + 0.3 * i) + 0.8, 0.4 / i * sin(i*p.x+ u_time + 0.3 * i) + 1.6);
              
    p *= vec2(0.5 / tan(p.y + u_time + 0.3) + 0.8, 0.4 / sin(p.x + u_time + 0.3) + 1.6);
    vec3 col = vec3(0.1 * sin(p.x) + 0.2, 0.5 * sin(p.y) + 0.2, sin(p.x));
    col *= 0.9;
                
                
                    // Output to screen
    gl_FragColor = vec4(col,1.0);
}
precision highp float;
uniform vec2 u_resolution;
uniform float u_time;
uniform vec2 u_position;
                
/**
 * Basic raytracing algorithm 
 */

#define NEAR 0.001
#define FAR 40.0
#define FOG 0.00005
#define FOV 0.5
#define RT_ITERATIONS 128
#define TARGET vec3(0.0)
#define PI 3.14159265359



float glow = 0.0, ttpi;

vec3 cw, cu, cv, rd;
vec4 np;

vec2 e = vec2(0.00035, -0.00035);

// useful functions
mat2 r2 (float r) { return mat2(cos(r), sin(r), -cos(r), cos(r)); }
float noise (vec3 p) {
	vec3 ip = floor(p),
         s = vec3(7.0, 157.0, 113.0);
    p-= ip;
    vec4 h = vec4(0.0, s.yz, s.y+s.z) + dot(ip, s);
    h = mix(fract(sin(h)*43758.5), fract(sin(h+s.x)*43758.5), p.x);
    h.xy = mix(h.xz, h.yw, p.y);
    return mix(h.x, h.y, p.z);
}

// primitives
float bo (vec3 p, vec3 r) { p = abs(p)-r; return max(max(p.x, p.y), p.z); } // box
float ca (vec3 p, float h, float r) { p.y-= clamp(p.y, 0.0, h); return length(p)-r; } // capsule


/**
 * this function generates a scene, distance based
 */
vec2 fb (in vec3 p) {
    vec2 h, t = vec2(ca(p+vec3(0.0,2.0,0.0), 4.0, 1.0), 5.0);
    t.x = min(bo(abs(p)-vec3(4.8,4.8,4.8), vec3(1.2, 1.2, 1.2)), t.x);
    
    h = vec2(ca(p, 10.0, 0.2), 3.0);
    
    t = t.x < h.x ? t : h;
    
    glow+= 0.1 / (0.1+t.x*t.x*100.0);
    
    t.x*= 0.1;
    
    return t;
}


/**
 * MAPPING FUNCTION
 */
vec2 mp (vec3 p) {
    p.z = mod(p.z+u_time*12.0, 20.0)-8.0;
    
    
    np = vec4(p, 1.0);
    
    float s = sin(p.z*0.1+ttpi*2.0-5.0)*0.1;
    
    for (float i = 0.0; i < 6.0; i++) {
    	np = abs(np) - vec4(4.0, 0.0, max(4.0*s, 2.2), 0.0);
        np.xy*= r2(0.4+s);
        np.zy*= r2(0.1+s*abs(cos(u_time/6.0)));
        np.xz*= r2(0.4*s*cos(u_time/10.0));
    }
    
    vec2 h, t = fb(np.xyz);
    return t;
}


/**
 * RAY TRACING METHOD 
 */
vec2 tr (in vec3 ro, in vec3 rd) {
    vec2 h, t = vec2(0.1);
    for (int i = 0; i < RT_ITERATIONS; i++) {
        h = mp(ro+rd*t.x);
        if (h.x < NEAR || t.x > FAR) break;
        t.x+= h.x;
        t.y = h.y;
    }
    if (t.x > FAR) t.x = 0.0;
    return t;
}


void main()
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = gl_FragCoord.xy/u_resolution.xy;
    uv-= 0.5;
    uv/= vec2(u_resolution.y/u_resolution.x, 1.0);
    uv.x/= 2.6; // looks better if upscaled on x
    
    // a bit naive but enough
    float bassLevel = 0.5;
    
    // time 
    float tt = mod(u_time, 100.0),
          bb = 0.5 + clamp(sin(tt), -0.5, 0.5);
    
    // background
    vec3 col, fo, ld = normalize(vec3(0.1,0.5,-0.5));
    col = fo = vec3(0.4)*cos(u_time/8.0) + vec3(0.1) * (1.0 - length(uv)*1.5 - 0.1);
    
    // camera 
    ttpi = mod(tt, 2.0*PI);
    ttpi = ttpi > PI ? 2.0*PI-ttpi : ttpi;
    //vec3 ro = vec3(cos(ttpi)*15.0, 0.0, sin(ttpi)*16.0);
    vec3 ro = vec3(0.0,0.0,-10.0);
    cw = normalize(TARGET-ro);
    cu = normalize(cross(cw, vec3(0.0, 1.0, 0.0)));
    cv = normalize(cross(cu, cw));
    rd = mat3(cu, cv, cw) * normalize(vec3(uv, FOV));
    
    // raytracer algorithm is called
    vec2 sc = tr(ro, rd);
    
    // distance camera / object
    float d = sc.x;
    
    // if d > 0, we compute the color of the pixel based on the scene 
    if (d > 0.0) {
   		vec3 po = ro + rd*d,
             no = normalize(e.xyy*mp(po+e.xyy).x + e.yyx*mp(po+e.yyx).x + e.yxy*mp(po+e.yxy).x + e.xxx*mp(po+e.xxx).x),
             al = mix(vec3(1.0, 1.0,1.0), vec3(1.0, 0.0, 0.32),abs(cos(u_time/5.0)));
        
        if (sc.y < 5.0) {
            al = mix(vec3(1.0, 1.0,1.0), vec3(1.0, 0.0, 0.8),abs(cos(u_time/5.0)));
        }
        
        // lighting
        
        float dif = max(0.0, dot(no, ld)),
              aor = d / 50.0,
              fr = pow(1.0+dot(no, rd), 4.0);
        
        vec3 sss = vec3(1.5) * smoothstep(0.0, 1.0, mp(po+ld*0.4).x/0.4);
            
        
        col = mix(al*0.2+al*(dif+sss), fo, min(fr, 0.5));
        col = mix(col, fo, 1.0 - exp(-FOG*d*d*d));
    }
    
    // we add the glow
    //bassLevel*= bassLevel;
    col+= vec3(0.0,.9,.3)*glow*0.05*bassLevel;
    
    // Output to screen
    gl_FragColor = vec4(col, 1.0);
    
}